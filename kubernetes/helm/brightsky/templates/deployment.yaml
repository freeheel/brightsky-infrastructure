apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "brightsky.fullname" . }}
  labels:
    {{- include "brightsky.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "brightsky.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "brightsky.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "brightsky.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: check-db-ready
        image: postgres:9.6.5
        command: [ 'sh', '-c',
            'until pg_isready -h {{ include "brightsky.databaseHost" . }} -p {{ include "brightsky.databasePort" . }};
                      do echo waiting for database; sleep 2; done;' ]
      containers:
        - name: {{ .Chart.Name }}-worker
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}

          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          args: ["--migrate", "work"]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: BRIGHTSKY_DATABASE_URL
            {{- if .Values.postgresql.enabled }}
              value: 'postgres://{{ include "brightsky.databaseUser" . }}:{{ include "brightsky.databasePassword" . }}@{{ include "brightsky.databaseHost" . }}:{{ include "brightsky.databasePort" . }}'
            {{- end }}
            {{- if not .Values.postgresql.enabled }}
              value: "{{ .Values.postgres.external.connection.url}}"
            {{- end }}
            - name: BRIGHTSKY_REDIS_URL
            {{- if .Values.redis.enabled }}
              value: 'redis://{{ include "brightsky.redis.fullname" . }}-master'
            {{- end }}
            {{- if not .Values.redis.enabled }}
              value: 'redis://{{ .Values.externalRedis.host}}'
            {{- end }}
            - name: BRIGHTSKY_MIN_DATE
              value: '{{- default "2020-01-01" .Values.startData }}'
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          args: [ "serve --bind 0.0.0.0:5000"]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: BRIGHTSKY_DATABASE_URL
            {{- if .Values.postgresql.enabled }}
              value: 'postgres://{{ include "brightsky.databaseUser" . }}:{{ include "brightsky.databasePassword" . }}@{{ include "brightsky.databaseHost" . }}:{{ include "brightsky.databasePort" . }}'
            {{- end }}
            {{- if not .Values.postgresql.enabled }}
              value: "{{ .Values.postgres.external.connection.url}}"
            {{- end }}
            - name: BRIGHTSKY_REDIS_URL
            {{- if .Values.redis.enabled }}
              value: 'redis://{{ include "brightsky.redis.fullname" . }}-master'
            {{- end }}
            {{- if not .Values.redis.enabled }}
              value: 'redis://{{ .Values.externalRedis.host}}'
            {{- end }}
            - name: BRIGHTSKY_MIN_DATE
              value: '{{- default "2020-01-01" .Values.startData }}'
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
